#!/usr/bin/env python3

import argparse
import os
from glob import iglob

from p2ptrans.interfaces import *

def readOptions():

    parser = argparse.ArgumentParser()
    parser.add_argument("-B","--bottom", nargs=2, dest="A", default=['./POSCAR_A','[0,0,1]'], help="Structure at the bottom")
    parser.add_argument("-T","--top", nargs=2, dest="B", default=['./POSCAR_B','[0,0,1]'], help="Structure at the top")
    parser.add_argument("-n","--ncell",dest="ncell",type=int, default=300, help="Number of cells to tile")
    parser.add_argument("-N","--niter",dest="n_iter",type=int, default=1000, help="Number of random starts")
    parser.add_argument("-i","--interactive",dest="interactive",action="store_true", default=False, help="Enables interactive display")
    parser.add_argument("-d","--disp",dest="savedisplay",action="store_true", default=False, help="Saves figures")
    parser.add_argument("-p","--param", dest="filename", type=str, default='./p2p.in', help="Parameter file")
    parser.add_argument("-o","--outdir",dest="outdir", type=str, default='.', help="Output directory")
    parser.add_argument("-u","--use",dest="use", type=str, default=None, help="Use previously calculated data")
    parser.add_argument("-m","--minimize",dest="minimize",action="store_true", default=False, help="Rerun minimization using the parameters stored in the folder provided with the -u option")
    parser.add_argument("-t","--test",dest="test",action="store_true", default=False, help="Tests the input file and prepares the run, you can continue this run with the -u [directory] -r option")
    parser.add_argument("-c","--chem", nargs='+', dest="rule", default=["1","Pt","Al","2","Si","Ge"], help="Chemisrty rule")
    parser.add_argument("-s","--sym",dest="sym",type=int, default=1, help="Max rotational symmetry of the two phases")

    options = parser.parse_args()

    fileA = options.A[0]
    planeA = eval(options.A[1])
    fileB = options.B[0]
    planeB = eval(options.B[1])
    ncell = options.ncell
    filename = options.filename
    savedisplay = options.savedisplay
    interactive = options.interactive
    if options.use == None:
        use = False
        minimize = True
        outdir = options.outdir
    else:
        use = True
        minimize = options.minimize
        outdir = options.use
    test = options.test
    n_iter = options.n_iter
    rule = dict()
    for symbol in options.rule:
        if symbol.isdigit():
            key = symbol
        elif key in rule:
            rule[key].add(symbol)
        else:
            rule[key] = {symbol}
    sym = options.sym
            
    return fileA, fileB, planeA, planeB, ncell, n_iter, filename, interactive, savedisplay, outdir, use, minimize, test, n_iter, rule, sym

def main():

    (fileA, fileB, planeA, planeB, ncell, n_iter, filename, interactive, savedisplay, outdir, use, minimize, test, n_iter, rule, sym) = readOptions()
    
    # START
    print(" ________    _______  ________   ")   
    print("|\\   __  \\  /  ___  \\|\\   __  \\  ")
    print("\\ \\  \\|\\  \\/__/|_/  /\\ \\  \\|\\  \\ ")
    print(" \\ \\   ____\\__|//  / /\\ \\   ____\\")
    print("  \\ \\  \\___|   /  /_/__\\ \\  \\___|")
    print("   \\ \\__\\     |\\________\\ \\__\\   ")
    print("    \\|__|      \\|_______|\\|__|   ")
    print()
    print("____________INTERFACES_____________")
    print()

    # If reusing a result load the info
    if use:

        fileA = "File 1"
        fileB = "File 2"
        
        listA, planeA, listB, planeB, ncell, n_iter, filecontent, rule  = pickle.load(open(outdir+"/param.dat","rb"))

        print("==>Using information from %s<=="%(outdir))
        print()
        print("The inputs for that run were:")
        print("-----------------------------------")
        print("Plane 1:", planeA)
        print("Plane 2:", planeB)
        print("Chemistry rule:", rule)
        print("File 1:", listA[0])
        print("File 2:", listB[0])
        print("ncell:", ncell)
        print("n_iter:", n_iter)
        print("Param file (at time of running):")
        for l in filecontent:
            print(l.rstrip())
        print("-----------------------------------")
        print()

    else:

        print("Chemistry rule:", rule)
        
        # Set up the output directory
        if not os.path.exists(outdir):
            os.makedirs(outdir)                

        listA = []
        print("Bottom structure file(s):")
        for poscarfile in iglob(fileA):
            print(poscarfile)
            listA.extend(readSurface(read.poscar(poscarfile), planeA, rule))
        print("Number of A structures:", len(listA))
        
        listB = []
        print("Top structure file(s):")
        for poscarfile in iglob(fileB):
            print(poscarfile)
            listB.extend(readSurface(read.poscar(poscarfile), planeB, rule))
        print("Number of B structures:", len(listB))
            
        try:
            with open(filename, "r") as f:
                filecontent = f.readlines()
        except FileNotFoundError:
            filecontent = ""

        # Save the parameters for the use function
        pickle.dump((listA, planeA, listB, planeB,  ncell, n_iter, filecontent, rule), open(outdir+"/param.dat","wb"))

    for A in listA:
        for B in listB:
            findMatchingInterfaces(A, B, ncell, n_iter, sym=sym, filename=filename, interactive=interactive,
                                   savedisplay=savedisplay, outdir=outdir,
                                   minimize=minimize, test=test)
    
    if test:
        return
    
    print("p2pint finished successfully")


main()

